/*
 *  This file is part of RocketPlaceholders, licensed under the MIT License.
 *
 *  Copyright (c) Lorenzo0111
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "7.1.1"
    id "net.kyori.indra.license-header" version "2.0.6"
    id "io.github.slimjar" version "1.3.0"
}

group = 'me.lorenzo0111'
version = '2.0.1'
description = 'RocketPlaceholders'

ext {
    libsBase = "me.lorenzo0111.rocketplaceholders.lib."
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" }
    maven { url "https://repo.extendedclip.com/content/repositories/placeholderapi/" }
    maven { url "https://repo.codemc.org/repository/maven-public" }
    maven { url "https://repo.mattstudios.me/artifactory/public/" }
    maven { url "https://repo.lucko.me/" }
    maven { url "https://dl.lorenzo0111.me/" }
}

dependencies {
    compileOnly("org.spigotmc:spigot-api:1.18-R0.1-SNAPSHOT")
    compileOnly("me.clip:placeholderapi:2.11.0")
    compileOnly("org.jetbrains:annotations:23.0.0")
    compileOnly("com.github.MilkBowl:VaultAPI:1.7.1")
    compileOnly("be.maximvdw:MVdWPlaceholderAPI:3.0.1-SNAPSHOT") {
        exclude module: 'spigot'
    }

    implementation("io.github.slimjar:slimjar:1.2.7")
    implementation("com.github.glyart:mystral:1.3.3-SNAPSHOT")
    implementation("dev.triumphteam:triumph-gui:3.0.5")
    implementation("org.bstats:bstats-bukkit:2.2.1")
    implementation("com.github.cryptomorin:XSeries:8.5.0.1")
    implementation("net.kyori:adventure-api:4.9.3")
    implementation("net.kyori:adventure-text-serializer-legacy:4.9.3")
    slim("mysql:mysql-connector-java:8.0.27")
    slim("commons-io:commons-io:2.11.0")
}

shadowJar {
    relocate("com.glyart.mystral", "${libsBase}mystral")
    relocate("org.checkerframework", "${libsBase}checkerframework")
    relocate("com.zaxxer.hikari", "${libsBase}hikari")
    relocate("google.protobuf", "${libsBase}protobuf")
    relocate("com.google.protobuf", "${libsBase}google.protobuf")
    relocate("com.google.common", "${libsBase}google.common")
    relocate("com.google.errorprone", "${libsBase}google.errorprone")
    relocate("com.google.j2objc", "${libsBase}google.j2objc")
    relocate("com.google.thirdparty", "${libsBase}google.thirdparty")
    relocate("org.slf4j", "${libsBase}slf4j")
    relocate("org.bstats", "${libsBase}bstats")
    relocate("dev.triumphteam.gui", "${libsBase}gui")
    relocate("net.kyori.adventure", "${libsBase}adventure")
    relocate("net.kyori.examination", "${libsBase}examination")
    relocate("com.cryptomorin.xseries", "${libsBase}xseries")
    relocate("io.github.slimjar", "${libsBase}slimjar")

    archiveFileName = "${project.name}-${project.version}.jar"
}

slimJar {
    relocate("com.mysql", "${libsBase}mysql")
    relocate("org.apache.commons.io","${libsBase}io")
}

javadoc {
    options.links(
            'https://javadoc.io/static/org.jetbrains/annotations/21.0.1/',
            'https://docs.oracle.com/en/java/javase/16/docs/api/',
            'https://papermc.io/javadocs/paper/1.16/'
    )
    source = sourceSets.main.allJava
    include("**/api/*.java")
    include("**/creator/*.java")
    include("**/creator/conditions/*.java")
    include("**/creator/dynamic/*.java")
    include("**/creator/conditions/engine/Requirements.java")
    exclude("**/api/RocketPlaceholdersAPIManager.java")
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        duplicatesStrategy DuplicatesStrategy.INCLUDE
        filter ReplaceTokens, tokens: [version: version]
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

license {
    newLine = true
}

java.sourceCompatibility = JavaVersion.VERSION_1_8 

tasks.withType(JavaCompile) { 
    options.encoding = 'UTF-8'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = description
            version = project.version

            from components.java
        }
    }

    repositories {
        maven {
            def snapshotUrl = "https://repo.codemc.io/repository/maven-snapshots/"
            def releaseUrl = "https://repo.codemc.io/repository/maven-releases/"

            url = project.version.endsWith("SNAPSHOT") ? snapshotUrl : releaseUrl

            def mavenUsername = System.getenv("NEXUS_USERNAME") ? System.getenv("NEXUS_USERNAME") : null
            def mavenPassword = System.getenv("NEXUS_PASSWORD") ? System.getenv("NEXUS_PASSWORD") : null

            if(mavenUsername != null && mavenPassword != null) {
                credentials {
                    username = mavenUsername
                    password = mavenPassword
                }
            }
        }
    }
}

tasks.build.dependsOn tasks.shadowJar
